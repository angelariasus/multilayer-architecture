CREATE TABLE usuarios (
    id_usuario NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password VARCHAR2(255) NOT NULL,
    nombre VARCHAR2(100) NOT NULL,
    tipo VARCHAR2(20) CHECK (tipo IN ('Alumno','Docente','Administrativo')),
    estado VARCHAR2(20) DEFAULT 'Activo' CHECK (estado IN ('Activo','Bloqueado'))
);

CREATE TABLE ejemplares (
    id_ejemplar NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    titulo VARCHAR2(200) NOT NULL,
    autor VARCHAR2(150),
    editorial VARCHAR2(100),
    anio NUMBER(4),
    categoria VARCHAR2(50),
    estado VARCHAR2(20) DEFAULT 'Disponible' CHECK (estado IN ('Disponible','Prestado','Baja'))
);

CREATE TABLE prestamos (
    id_prestamo NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_usuario NUMBER NOT NULL,
    id_ejemplar NUMBER NOT NULL,
    fecha_prestamo DATE DEFAULT SYSDATE,
    fecha_devolucion DATE,
    devuelto CHAR(1) DEFAULT 'N' CHECK (devuelto IN ('S','N')),
    CONSTRAINT fk_prestamo_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
    CONSTRAINT fk_prestamo_ejemplar FOREIGN KEY (id_ejemplar) REFERENCES ejemplares(id_ejemplar)
);

CREATE TABLE reservas (
    id_reserva NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_usuario NUMBER NOT NULL,
    id_ejemplar NUMBER NOT NULL,
    fecha_reserva DATE DEFAULT SYSDATE,
    CONSTRAINT fk_reserva_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
    CONSTRAINT fk_reserva_ejemplar FOREIGN KEY (id_ejemplar) REFERENCES ejemplares(id_ejemplar)
);

CREATE TABLE multas (
    id_multa NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_usuario NUMBER NOT NULL,
    monto NUMBER(6,2) NOT NULL,
    pagado CHAR(1) DEFAULT 'N' CHECK (pagado IN ('S','N')),
    fecha_multa DATE DEFAULT SYSDATE,
    CONSTRAINT fk_multa_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
);

CREATE INDEX idx_prestamos_usuario ON prestamos(id_usuario);
CREATE INDEX idx_prestamos_ejemplar ON prestamos(id_ejemplar);
CREATE INDEX idx_reservas_usuario ON reservas(id_usuario);
CREATE INDEX idx_reservas_ejemplar ON reservas(id_ejemplar);

CREATE OR REPLACE TRIGGER trg_prestamo_insert
AFTER INSERT ON prestamos
FOR EACH ROW
BEGIN
    UPDATE ejemplares
    SET estado = 'Prestado'
    WHERE id_ejemplar = :NEW.id_ejemplar;
END;
/

CREATE OR REPLACE TRIGGER trg_prestamo_update
AFTER UPDATE OF devuelto ON prestamos
FOR EACH ROW
WHEN (NEW.devuelto = 'S')
BEGIN
    UPDATE ejemplares
    SET estado = 'Disponible'
    WHERE id_ejemplar = :NEW.id_ejemplar;
END;
/

CREATE OR REPLACE TRIGGER trg_validar_prestamo
BEFORE INSERT ON prestamos
FOR EACH ROW
DECLARE
    v_estado ejemplares.estado%TYPE;
BEGIN
    SELECT estado INTO v_estado
    FROM ejemplares
    WHERE id_ejemplar = :NEW.id_ejemplar;

    IF v_estado <> 'Disponible' THEN
        RAISE_APPLICATION_ERROR(-20001, 'El ejemplar no está disponible para préstamo.');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_generar_multa
AFTER UPDATE OF devuelto ON prestamos
FOR EACH ROW
WHEN (NEW.devuelto = 'S')
DECLARE
    v_dias NUMBER;
    v_monto NUMBER(6,2);
BEGIN
    IF :NEW.fecha_devolucion < SYSDATE THEN
        v_dias := TRUNC(SYSDATE - :NEW.fecha_devolucion);
        v_monto := v_dias * 2; 
        
        INSERT INTO multas (id_usuario, monto, pagado, fecha_multa)
        VALUES (:NEW.id_usuario, v_monto, 'N', SYSDATE);
    END IF;
END;
/

CREATE OR REPLACE FUNCTION fn_monto_multas(p_id_usuario NUMBER)
RETURN NUMBER
IS
    v_total NUMBER(10,2);
BEGIN
    SELECT NVL(SUM(monto), 0)
    INTO v_total
    FROM multas
    WHERE id_usuario = p_id_usuario
      AND pagado = 'N';
    
    RETURN v_total;
END;
/

CREATE OR REPLACE FUNCTION fn_tiene_prestamos_pendientes(p_id_usuario NUMBER)
RETURN CHAR
IS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM prestamos
    WHERE id_usuario = p_id_usuario
      AND devuelto = 'N';

    IF v_count > 0 THEN
        RETURN 'S';
    ELSE
        RETURN 'N';
    END IF;
END;
/


